import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // generated by flutterfire configure
import 'package:cloud_firestore/cloud_firestore.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class ExerciseRecord {
  final String exerciseName;
  final double weight;
  final DateTime date;
  final int reps;
  final int sets;

  ExerciseRecord({
    required this.exerciseName,
    required this.weight,
    required this.date,
    required this.reps,
    required this.sets,
  });
}

class _MyHomePageState extends State<MyHomePage> {
  final List<ExerciseRecord> _records = [];

  @override
  void initState() {
    super.initState();
    _fetchRecords();
  }

  Future<void> _fetchRecords() async {
    CollectionReference exercises = FirebaseFirestore.instance.collection('exercises');
    QuerySnapshot querySnapshot = await exercises.get();

    setState(() {
      _records.clear();
      for (var doc in querySnapshot.docs) {
        var data = doc.data() as Map<String, dynamic>;
        _records.add(ExerciseRecord(
          exerciseName: data['exerciseName'],
          weight: data['weight'],
          date: (data['date'] as Timestamp).toDate(),
          reps: data['reps'],
          sets: data['sets'],
        ));
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: const Text('MyPR'),
      ),
      body: ListView.builder(
        itemCount: _records.length,
        itemBuilder: (context, index) {
          final record = _records[index];
          return ListTile(
            title: Text(record.exerciseName),
            subtitle: Text('Weight: ${record.weight}, Date: ${record.date.toLocal()}'),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _addNewRecord,
        child: const Icon(Icons.add),
      ),
    );
  }

  Future<void> _addNewRecord() async {
    final newRecord = await showDialog<ExerciseRecord>(
      context: context,
      builder: (context) {
        String exerciseName = '';
        String weightText = '';
        String repsText = '';
        String setsText = '';

        return AlertDialog(
          title: const Text('Add New Record'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                decoration: const InputDecoration(labelText: 'Exercise Name'),
                onChanged: (value) => exerciseName = value,
              ),
              TextField(
                decoration: const InputDecoration(labelText: 'Weight'),
                keyboardType: TextInputType.number,
                onChanged: (value) => weightText = value,
              ),
              TextField(
                decoration: const InputDecoration(labelText: 'Reps'),
                keyboardType: TextInputType.number,
                onChanged: (value) => repsText = value,
              ),
              TextField(
                decoration: const InputDecoration(labelText: 'Sets'),
                keyboardType: TextInputType.number,
                onChanged: (value) => setsText = value,
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context), // Cancel
              child: const Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                final weightValue = double.tryParse(weightText) ?? 0;
                final repsValue = int.tryParse(repsText) ?? 0;
                final setsValue = int.tryParse(setsText) ?? 0;
                Navigator.pop(
                  context,
                  ExerciseRecord(
                    exerciseName: exerciseName,
                    weight: weightValue,
                    date: DateTime.now(),
                    reps: repsValue,
                    sets: setsValue,
                  ),
                );
              },
              child: const Text('Save'),
            ),
          ],
        );
      },
    );

    if (newRecord != null) {
      setState(() {
        _records.add(newRecord);
      });

      // Write to Firestore
      CollectionReference exercises = FirebaseFirestore.instance.collection('exercises');
      try {
        await exercises.add({
          'exerciseName': newRecord.exerciseName,
          'weight': newRecord.weight,
          'date': newRecord.date,
          'reps': newRecord.reps,
          'sets': newRecord.sets,
        });
        //print('Record added to Firestore: ${newRecord.exerciseName}');
      } catch (e) {
      //  print('Failed to add record to Firestore: $e');
      }
    }
  }
}